<?php
namespace Parquet;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class Type {
  const BOOLEAN = 0;
  const INT32 = 1;
  const INT64 = 2;
  const INT96 = 3;
  const FLOAT = 4;
  const DOUBLE = 5;
  const BYTE_ARRAY = 6;
  const FIXED_LEN_BYTE_ARRAY = 7;
  static public $__names = array(
    0 => 'BOOLEAN',
    1 => 'INT32',
    2 => 'INT64',
    3 => 'INT96',
    4 => 'FLOAT',
    5 => 'DOUBLE',
    6 => 'BYTE_ARRAY',
    7 => 'FIXED_LEN_BYTE_ARRAY',
  );
}

final class ConvertedType {
  const UTF8 = 0;
  const MAP = 1;
  const MAP_KEY_VALUE = 2;
  const LIST = 3;
  static public $__names = array(
    0 => 'UTF8',
    1 => 'MAP',
    2 => 'MAP_KEY_VALUE',
    3 => 'LIST',
  );
}

final class FieldRepetitionType {
  const REQUIRED = 0;
  const OPTIONAL = 1;
  const REPEATED = 2;
  static public $__names = array(
    0 => 'REQUIRED',
    1 => 'OPTIONAL',
    2 => 'REPEATED',
  );
}

final class Encoding {
  const PLAIN = 0;
  const GROUP_VAR_INT = 1;
  const PLAIN_DICTIONARY = 2;
  const RLE = 3;
  const BIT_PACKED = 4;
  static public $__names = array(
    0 => 'PLAIN',
    1 => 'GROUP_VAR_INT',
    2 => 'PLAIN_DICTIONARY',
    3 => 'RLE',
    4 => 'BIT_PACKED',
  );
}

final class CompressionCodec {
  const UNCOMPRESSED = 0;
  const SNAPPY = 1;
  const GZIP = 2;
  const LZO = 3;
  static public $__names = array(
    0 => 'UNCOMPRESSED',
    1 => 'SNAPPY',
    2 => 'GZIP',
    3 => 'LZO',
  );
}

final class PageType {
  const DATA_PAGE = 0;
  const INDEX_PAGE = 1;
  const DICTIONARY_PAGE = 2;
  static public $__names = array(
    0 => 'DATA_PAGE',
    1 => 'INDEX_PAGE',
    2 => 'DICTIONARY_PAGE',
  );
}

class SchemaElement {
  static $_TSPEC;

  public $type = null;
  public $type_length = null;
  public $repetition_type = null;
  public $name = null;
  public $num_children = null;
  public $converted_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'type_length',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'repetition_type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'num_children',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'converted_type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['type_length'])) {
        $this->type_length = $vals['type_length'];
      }
      if (isset($vals['repetition_type'])) {
        $this->repetition_type = $vals['repetition_type'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['num_children'])) {
        $this->num_children = $vals['num_children'];
      }
      if (isset($vals['converted_type'])) {
        $this->converted_type = $vals['converted_type'];
      }
    }
  }

  public function getName() {
    return 'SchemaElement';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type_length);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->repetition_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->num_children);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->converted_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SchemaElement');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type_length !== null) {
      $xfer += $output->writeFieldBegin('type_length', TType::I32, 2);
      $xfer += $output->writeI32($this->type_length);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->repetition_type !== null) {
      $xfer += $output->writeFieldBegin('repetition_type', TType::I32, 3);
      $xfer += $output->writeI32($this->repetition_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num_children !== null) {
      $xfer += $output->writeFieldBegin('num_children', TType::I32, 5);
      $xfer += $output->writeI32($this->num_children);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->converted_type !== null) {
      $xfer += $output->writeFieldBegin('converted_type', TType::I32, 6);
      $xfer += $output->writeI32($this->converted_type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DataPageHeader {
  static $_TSPEC;

  public $num_values = null;
  public $encoding = null;
  public $definition_level_encoding = null;
  public $repetition_level_encoding = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'num_values',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'encoding',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'definition_level_encoding',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'repetition_level_encoding',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['num_values'])) {
        $this->num_values = $vals['num_values'];
      }
      if (isset($vals['encoding'])) {
        $this->encoding = $vals['encoding'];
      }
      if (isset($vals['definition_level_encoding'])) {
        $this->definition_level_encoding = $vals['definition_level_encoding'];
      }
      if (isset($vals['repetition_level_encoding'])) {
        $this->repetition_level_encoding = $vals['repetition_level_encoding'];
      }
    }
  }

  public function getName() {
    return 'DataPageHeader';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->num_values);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->encoding);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->definition_level_encoding);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->repetition_level_encoding);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DataPageHeader');
    if ($this->num_values !== null) {
      $xfer += $output->writeFieldBegin('num_values', TType::I32, 1);
      $xfer += $output->writeI32($this->num_values);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->encoding !== null) {
      $xfer += $output->writeFieldBegin('encoding', TType::I32, 2);
      $xfer += $output->writeI32($this->encoding);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->definition_level_encoding !== null) {
      $xfer += $output->writeFieldBegin('definition_level_encoding', TType::I32, 3);
      $xfer += $output->writeI32($this->definition_level_encoding);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->repetition_level_encoding !== null) {
      $xfer += $output->writeFieldBegin('repetition_level_encoding', TType::I32, 4);
      $xfer += $output->writeI32($this->repetition_level_encoding);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IndexPageHeader {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'IndexPageHeader';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IndexPageHeader');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DictionaryPageHeader {
  static $_TSPEC;

  public $num_values = null;
  public $encoding = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'num_values',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'encoding',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['num_values'])) {
        $this->num_values = $vals['num_values'];
      }
      if (isset($vals['encoding'])) {
        $this->encoding = $vals['encoding'];
      }
    }
  }

  public function getName() {
    return 'DictionaryPageHeader';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->num_values);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->encoding);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DictionaryPageHeader');
    if ($this->num_values !== null) {
      $xfer += $output->writeFieldBegin('num_values', TType::I32, 1);
      $xfer += $output->writeI32($this->num_values);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->encoding !== null) {
      $xfer += $output->writeFieldBegin('encoding', TType::I32, 2);
      $xfer += $output->writeI32($this->encoding);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PageHeader {
  static $_TSPEC;

  public $type = null;
  public $uncompressed_page_size = null;
  public $compressed_page_size = null;
  public $crc = null;
  public $data_page_header = null;
  public $index_page_header = null;
  public $dictionary_page_header = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'uncompressed_page_size',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'compressed_page_size',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'crc',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'data_page_header',
          'type' => TType::STRUCT,
          'class' => '\Parquet\DataPageHeader',
          ),
        6 => array(
          'var' => 'index_page_header',
          'type' => TType::STRUCT,
          'class' => '\Parquet\IndexPageHeader',
          ),
        7 => array(
          'var' => 'dictionary_page_header',
          'type' => TType::STRUCT,
          'class' => '\Parquet\DictionaryPageHeader',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['uncompressed_page_size'])) {
        $this->uncompressed_page_size = $vals['uncompressed_page_size'];
      }
      if (isset($vals['compressed_page_size'])) {
        $this->compressed_page_size = $vals['compressed_page_size'];
      }
      if (isset($vals['crc'])) {
        $this->crc = $vals['crc'];
      }
      if (isset($vals['data_page_header'])) {
        $this->data_page_header = $vals['data_page_header'];
      }
      if (isset($vals['index_page_header'])) {
        $this->index_page_header = $vals['index_page_header'];
      }
      if (isset($vals['dictionary_page_header'])) {
        $this->dictionary_page_header = $vals['dictionary_page_header'];
      }
    }
  }

  public function getName() {
    return 'PageHeader';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uncompressed_page_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->compressed_page_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->crc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->data_page_header = new \Parquet\DataPageHeader();
            $xfer += $this->data_page_header->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->index_page_header = new \Parquet\IndexPageHeader();
            $xfer += $this->index_page_header->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->dictionary_page_header = new \Parquet\DictionaryPageHeader();
            $xfer += $this->dictionary_page_header->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PageHeader');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uncompressed_page_size !== null) {
      $xfer += $output->writeFieldBegin('uncompressed_page_size', TType::I32, 2);
      $xfer += $output->writeI32($this->uncompressed_page_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compressed_page_size !== null) {
      $xfer += $output->writeFieldBegin('compressed_page_size', TType::I32, 3);
      $xfer += $output->writeI32($this->compressed_page_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->crc !== null) {
      $xfer += $output->writeFieldBegin('crc', TType::I32, 4);
      $xfer += $output->writeI32($this->crc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data_page_header !== null) {
      if (!is_object($this->data_page_header)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data_page_header', TType::STRUCT, 5);
      $xfer += $this->data_page_header->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->index_page_header !== null) {
      if (!is_object($this->index_page_header)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('index_page_header', TType::STRUCT, 6);
      $xfer += $this->index_page_header->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dictionary_page_header !== null) {
      if (!is_object($this->dictionary_page_header)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('dictionary_page_header', TType::STRUCT, 7);
      $xfer += $this->dictionary_page_header->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class KeyValue {
  static $_TSPEC;

  public $key = null;
  public $value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
    }
  }

  public function getName() {
    return 'KeyValue';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KeyValue');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::STRING, 2);
      $xfer += $output->writeString($this->value);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ColumnMetaData {
  static $_TSPEC;

  public $type = null;
  public $encodings = null;
  public $path_in_schema = null;
  public $codec = null;
  public $num_values = null;
  public $total_uncompressed_size = null;
  public $total_compressed_size = null;
  public $key_value_metadata = null;
  public $data_page_offset = null;
  public $index_page_offset = null;
  public $dictionary_page_offset = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'encodings',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        3 => array(
          'var' => 'path_in_schema',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'codec',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'num_values',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'total_uncompressed_size',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'total_compressed_size',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'key_value_metadata',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Parquet\KeyValue',
            ),
          ),
        9 => array(
          'var' => 'data_page_offset',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'index_page_offset',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'dictionary_page_offset',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['encodings'])) {
        $this->encodings = $vals['encodings'];
      }
      if (isset($vals['path_in_schema'])) {
        $this->path_in_schema = $vals['path_in_schema'];
      }
      if (isset($vals['codec'])) {
        $this->codec = $vals['codec'];
      }
      if (isset($vals['num_values'])) {
        $this->num_values = $vals['num_values'];
      }
      if (isset($vals['total_uncompressed_size'])) {
        $this->total_uncompressed_size = $vals['total_uncompressed_size'];
      }
      if (isset($vals['total_compressed_size'])) {
        $this->total_compressed_size = $vals['total_compressed_size'];
      }
      if (isset($vals['key_value_metadata'])) {
        $this->key_value_metadata = $vals['key_value_metadata'];
      }
      if (isset($vals['data_page_offset'])) {
        $this->data_page_offset = $vals['data_page_offset'];
      }
      if (isset($vals['index_page_offset'])) {
        $this->index_page_offset = $vals['index_page_offset'];
      }
      if (isset($vals['dictionary_page_offset'])) {
        $this->dictionary_page_offset = $vals['dictionary_page_offset'];
      }
    }
  }

  public function getName() {
    return 'ColumnMetaData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->encodings = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI32($elem5);
              $this->encodings []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->path_in_schema = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $xfer += $input->readString($elem11);
              $this->path_in_schema []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->codec);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->num_values);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->total_uncompressed_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->total_compressed_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->key_value_metadata = array();
            $_size12 = 0;
            $_etype15 = 0;
            $xfer += $input->readListBegin($_etype15, $_size12);
            for ($_i16 = 0; $_i16 < $_size12; ++$_i16)
            {
              $elem17 = null;
              $elem17 = new \Parquet\KeyValue();
              $xfer += $elem17->read($input);
              $this->key_value_metadata []= $elem17;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->data_page_offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->index_page_offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dictionary_page_offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ColumnMetaData');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->encodings !== null) {
      if (!is_array($this->encodings)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('encodings', TType::LST, 2);
      {
        $output->writeListBegin(TType::I32, count($this->encodings));
        {
          foreach ($this->encodings as $iter18)
          {
            $xfer += $output->writeI32($iter18);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->path_in_schema !== null) {
      if (!is_array($this->path_in_schema)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('path_in_schema', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->path_in_schema));
        {
          foreach ($this->path_in_schema as $iter19)
          {
            $xfer += $output->writeString($iter19);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->codec !== null) {
      $xfer += $output->writeFieldBegin('codec', TType::I32, 4);
      $xfer += $output->writeI32($this->codec);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num_values !== null) {
      $xfer += $output->writeFieldBegin('num_values', TType::I64, 5);
      $xfer += $output->writeI64($this->num_values);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total_uncompressed_size !== null) {
      $xfer += $output->writeFieldBegin('total_uncompressed_size', TType::I64, 6);
      $xfer += $output->writeI64($this->total_uncompressed_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total_compressed_size !== null) {
      $xfer += $output->writeFieldBegin('total_compressed_size', TType::I64, 7);
      $xfer += $output->writeI64($this->total_compressed_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->key_value_metadata !== null) {
      if (!is_array($this->key_value_metadata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('key_value_metadata', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRUCT, count($this->key_value_metadata));
        {
          foreach ($this->key_value_metadata as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data_page_offset !== null) {
      $xfer += $output->writeFieldBegin('data_page_offset', TType::I64, 9);
      $xfer += $output->writeI64($this->data_page_offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->index_page_offset !== null) {
      $xfer += $output->writeFieldBegin('index_page_offset', TType::I64, 10);
      $xfer += $output->writeI64($this->index_page_offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dictionary_page_offset !== null) {
      $xfer += $output->writeFieldBegin('dictionary_page_offset', TType::I64, 11);
      $xfer += $output->writeI64($this->dictionary_page_offset);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ColumnChunk {
  static $_TSPEC;

  public $file_path = null;
  public $file_offset = null;
  public $meta_data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'file_path',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'file_offset',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'meta_data',
          'type' => TType::STRUCT,
          'class' => '\Parquet\ColumnMetaData',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['file_path'])) {
        $this->file_path = $vals['file_path'];
      }
      if (isset($vals['file_offset'])) {
        $this->file_offset = $vals['file_offset'];
      }
      if (isset($vals['meta_data'])) {
        $this->meta_data = $vals['meta_data'];
      }
    }
  }

  public function getName() {
    return 'ColumnChunk';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->file_path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->file_offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->meta_data = new \Parquet\ColumnMetaData();
            $xfer += $this->meta_data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ColumnChunk');
    if ($this->file_path !== null) {
      $xfer += $output->writeFieldBegin('file_path', TType::STRING, 1);
      $xfer += $output->writeString($this->file_path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->file_offset !== null) {
      $xfer += $output->writeFieldBegin('file_offset', TType::I64, 2);
      $xfer += $output->writeI64($this->file_offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->meta_data !== null) {
      if (!is_object($this->meta_data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('meta_data', TType::STRUCT, 3);
      $xfer += $this->meta_data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RowGroup {
  static $_TSPEC;

  public $columns = null;
  public $total_byte_size = null;
  public $num_rows = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Parquet\ColumnChunk',
            ),
          ),
        2 => array(
          'var' => 'total_byte_size',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'num_rows',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['columns'])) {
        $this->columns = $vals['columns'];
      }
      if (isset($vals['total_byte_size'])) {
        $this->total_byte_size = $vals['total_byte_size'];
      }
      if (isset($vals['num_rows'])) {
        $this->num_rows = $vals['num_rows'];
      }
    }
  }

  public function getName() {
    return 'RowGroup';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->columns = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new \Parquet\ColumnChunk();
              $xfer += $elem26->read($input);
              $this->columns []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->total_byte_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->num_rows);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RowGroup');
    if ($this->columns !== null) {
      if (!is_array($this->columns)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('columns', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->columns));
        {
          foreach ($this->columns as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total_byte_size !== null) {
      $xfer += $output->writeFieldBegin('total_byte_size', TType::I64, 2);
      $xfer += $output->writeI64($this->total_byte_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num_rows !== null) {
      $xfer += $output->writeFieldBegin('num_rows', TType::I64, 3);
      $xfer += $output->writeI64($this->num_rows);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FileMetaData {
  static $_TSPEC;

  public $version = null;
  public $schema = null;
  public $num_rows = null;
  public $row_groups = null;
  public $key_value_metadata = null;
  public $created_by = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'version',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'schema',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Parquet\SchemaElement',
            ),
          ),
        3 => array(
          'var' => 'num_rows',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'row_groups',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Parquet\RowGroup',
            ),
          ),
        5 => array(
          'var' => 'key_value_metadata',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Parquet\KeyValue',
            ),
          ),
        6 => array(
          'var' => 'created_by',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['schema'])) {
        $this->schema = $vals['schema'];
      }
      if (isset($vals['num_rows'])) {
        $this->num_rows = $vals['num_rows'];
      }
      if (isset($vals['row_groups'])) {
        $this->row_groups = $vals['row_groups'];
      }
      if (isset($vals['key_value_metadata'])) {
        $this->key_value_metadata = $vals['key_value_metadata'];
      }
      if (isset($vals['created_by'])) {
        $this->created_by = $vals['created_by'];
      }
    }
  }

  public function getName() {
    return 'FileMetaData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->schema = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new \Parquet\SchemaElement();
              $xfer += $elem33->read($input);
              $this->schema []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->num_rows);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->row_groups = array();
            $_size34 = 0;
            $_etype37 = 0;
            $xfer += $input->readListBegin($_etype37, $_size34);
            for ($_i38 = 0; $_i38 < $_size34; ++$_i38)
            {
              $elem39 = null;
              $elem39 = new \Parquet\RowGroup();
              $xfer += $elem39->read($input);
              $this->row_groups []= $elem39;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->key_value_metadata = array();
            $_size40 = 0;
            $_etype43 = 0;
            $xfer += $input->readListBegin($_etype43, $_size40);
            for ($_i44 = 0; $_i44 < $_size40; ++$_i44)
            {
              $elem45 = null;
              $elem45 = new \Parquet\KeyValue();
              $xfer += $elem45->read($input);
              $this->key_value_metadata []= $elem45;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->created_by);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FileMetaData');
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I32, 1);
      $xfer += $output->writeI32($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->schema !== null) {
      if (!is_array($this->schema)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('schema', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->schema));
        {
          foreach ($this->schema as $iter46)
          {
            $xfer += $iter46->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num_rows !== null) {
      $xfer += $output->writeFieldBegin('num_rows', TType::I64, 3);
      $xfer += $output->writeI64($this->num_rows);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->row_groups !== null) {
      if (!is_array($this->row_groups)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('row_groups', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->row_groups));
        {
          foreach ($this->row_groups as $iter47)
          {
            $xfer += $iter47->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->key_value_metadata !== null) {
      if (!is_array($this->key_value_metadata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('key_value_metadata', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->key_value_metadata));
        {
          foreach ($this->key_value_metadata as $iter48)
          {
            $xfer += $iter48->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->created_by !== null) {
      $xfer += $output->writeFieldBegin('created_by', TType::STRING, 6);
      $xfer += $output->writeString($this->created_by);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


