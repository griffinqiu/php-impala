<?php
namespace Impala;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class TPrimitiveType {
  const INVALID_TYPE = 0;
  const NULL_TYPE = 1;
  const BOOLEAN = 2;
  const TINYINT = 3;
  const SMALLINT = 4;
  const INT = 5;
  const BIGINT = 6;
  const FLOAT = 7;
  const DOUBLE = 8;
  const DATE = 9;
  const DATETIME = 10;
  const TIMESTAMP = 11;
  const STRING = 12;
  const BINARY = 13;
  const DECIMAL = 14;
  static public $__names = array(
    0 => 'INVALID_TYPE',
    1 => 'NULL_TYPE',
    2 => 'BOOLEAN',
    3 => 'TINYINT',
    4 => 'SMALLINT',
    5 => 'INT',
    6 => 'BIGINT',
    7 => 'FLOAT',
    8 => 'DOUBLE',
    9 => 'DATE',
    10 => 'DATETIME',
    11 => 'TIMESTAMP',
    12 => 'STRING',
    13 => 'BINARY',
    14 => 'DECIMAL',
  );
}

final class TStmtType {
  const QUERY = 0;
  const DDL = 1;
  const DML = 2;
  const EXPLAIN = 3;
  const LOAD = 4;
  static public $__names = array(
    0 => 'QUERY',
    1 => 'DDL',
    2 => 'DML',
    3 => 'EXPLAIN',
    4 => 'LOAD',
  );
}

final class TExplainLevel {
  const NORMAL = 0;
  const VERBOSE = 1;
  static public $__names = array(
    0 => 'NORMAL',
    1 => 'VERBOSE',
  );
}

class TNetworkAddress {
  static $_TSPEC;

  public $hostname = null;
  public $port = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'hostname',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'port',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['hostname'])) {
        $this->hostname = $vals['hostname'];
      }
      if (isset($vals['port'])) {
        $this->port = $vals['port'];
      }
    }
  }

  public function getName() {
    return 'TNetworkAddress';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->hostname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->port);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TNetworkAddress');
    if ($this->hostname !== null) {
      $xfer += $output->writeFieldBegin('hostname', TType::STRING, 1);
      $xfer += $output->writeString($this->hostname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->port !== null) {
      $xfer += $output->writeFieldBegin('port', TType::I32, 2);
      $xfer += $output->writeI32($this->port);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TUniqueId {
  static $_TSPEC;

  public $hi = null;
  public $lo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'hi',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'lo',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['hi'])) {
        $this->hi = $vals['hi'];
      }
      if (isset($vals['lo'])) {
        $this->lo = $vals['lo'];
      }
    }
  }

  public function getName() {
    return 'TUniqueId';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->hi);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TUniqueId');
    if ($this->hi !== null) {
      $xfer += $output->writeFieldBegin('hi', TType::I64, 1);
      $xfer += $output->writeI64($this->hi);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lo !== null) {
      $xfer += $output->writeFieldBegin('lo', TType::I64, 2);
      $xfer += $output->writeI64($this->lo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


